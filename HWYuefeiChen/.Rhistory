# K-Means Clustering
matstd.employ <- scale(Animal_Rights_data[,2:10])
# K-means, k=2, 3, 4, 5, 6
# Centers (k's) are numbers thus, 10 random sets are chosen
(kmeans2.employ <- kmeans(matstd.employ,2,nstart = 10))
# Computing the percentage of variation accounted for. Two clusters
perc.var.2 <- round(100*(1 - kmeans2.employ$betweenss/kmeans2.employ$totss),1)
names(perc.var.2) <- "Perc. 2 clus"
perc.var.2
# Computing the percentage of variation accounted for. Three clusters
(kmeans3.employ <- kmeans(matstd.employ,3,nstart = 10))
perc.var.3 <- round(100*(1 - kmeans3.employ$betweenss/kmeans3.employ$totss),1)
names(perc.var.3) <- "Perc. 3 clus"
perc.var.3
# Computing the percentage of variation accounted for. Four clusters
(kmeans4.employ <- kmeans(matstd.employ,4,nstart = 10))
perc.var.4 <- round(100*(1 - kmeans4.employ$betweenss/kmeans4.employ$totss),1)
names(perc.var.4) <- "Perc. 4 clus"
perc.var.4
# Computing the percentage of variation accounted for. Five clusters
(kmeans5.employ <- kmeans(matstd.employ,5,nstart = 10))
perc.var.5 <- round(100*(1 - kmeans5.employ$betweenss/kmeans5.employ$totss),1)
names(perc.var.5) <- "Perc. 5 clus"
perc.var.5
(kmeans6.employ <- kmeans(matstd.employ,6,nstart = 10))
# Computing the percentage of variation accounted for. Six clusters
perc.var.6 <- round(100*(1 - kmeans6.employ$betweenss/kmeans6.employ$totss),1)
names(perc.var.6) <- "Perc. 6 clus"
perc.var.6
attributes(perc.var.6)
Variance_List <- c(perc.var.2,perc.var.3,perc.var.4,perc.var.5,perc.var.6)
Variance_List
plot(Variance_List)
fviz_nbclust(Animal_Rights_data[,2:10], kmeans, method = "gap_stat")
set.seed(234)
km.res <- kmeans(Animal_Rights_data[,2:10], 4, nstart = 5)
# Visualize
fviz_cluster(km.res, data = Animal_Rights_data[,2:10],
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
# K-Means Clustering
matstd.employ <- scale(Animal_Rights_data[,2:10])
# K-means, k=2, 3, 4, 5, 6
# Centers (k's) are numbers thus, 10 random sets are chosen
(kmeans2.employ <- kmeans(matstd.employ,2,nstart = 10))
# Computing the percentage of variation accounted for. Two clusters
perc.var.2 <- round(100*(1 - kmeans2.employ$betweenss/kmeans2.employ$totss),1)
names(perc.var.2) <- "Perc. 2 clus"
perc.var.2
# Computing the percentage of variation accounted for. Three clusters
(kmeans3.employ <- kmeans(matstd.employ,3,nstart = 10))
perc.var.3 <- round(100*(1 - kmeans3.employ$betweenss/kmeans3.employ$totss),1)
names(perc.var.3) <- "Perc. 3 clus"
perc.var.3
# Computing the percentage of variation accounted for. Four clusters
(kmeans4.employ <- kmeans(matstd.employ,4,nstart = 10))
perc.var.4 <- round(100*(1 - kmeans4.employ$betweenss/kmeans4.employ$totss),1)
names(perc.var.4) <- "Perc. 4 clus"
perc.var.4
# Computing the percentage of variation accounted for. Five clusters
(kmeans5.employ <- kmeans(matstd.employ,5,nstart = 10))
perc.var.5 <- round(100*(1 - kmeans5.employ$betweenss/kmeans5.employ$totss),1)
names(perc.var.5) <- "Perc. 5 clus"
perc.var.5
(kmeans6.employ <- kmeans(matstd.employ,6,nstart = 10))
# Computing the percentage of variation accounted for. Six clusters
perc.var.6 <- round(100*(1 - kmeans6.employ$betweenss/kmeans6.employ$totss),1)
names(perc.var.6) <- "Perc. 6 clus"
perc.var.6
attributes(perc.var.6)
Variance_List <- c(perc.var.2,perc.var.3,perc.var.4,perc.var.5,perc.var.6)
Variance_List
plot(Variance_List)
fviz_nbclust(Animal_Rights_data[,2:10], kmeans, method = "gap_stat")
set.seed(234)
km.res <- kmeans(Animal_Rights_data[,2:10], 4, nstart = 15)
# Visualize
fviz_cluster(km.res, data = Animal_Rights_data[,2:10],
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
# K-Means Clustering
matstd.employ <- scale(Animal_Rights_data[,2:10])
# K-means, k=2, 3, 4, 5, 6
# Centers (k's) are numbers thus, 10 random sets are chosen
(kmeans2.employ <- kmeans(matstd.employ,2,nstart = 10))
# Computing the percentage of variation accounted for. Two clusters
perc.var.2 <- round(100*(1 - kmeans2.employ$betweenss/kmeans2.employ$totss),1)
names(perc.var.2) <- "Perc. 2 clus"
perc.var.2
# Computing the percentage of variation accounted for. Three clusters
(kmeans3.employ <- kmeans(matstd.employ,3,nstart = 10))
perc.var.3 <- round(100*(1 - kmeans3.employ$betweenss/kmeans3.employ$totss),1)
names(perc.var.3) <- "Perc. 3 clus"
perc.var.3
# Computing the percentage of variation accounted for. Four clusters
(kmeans4.employ <- kmeans(matstd.employ,4,nstart = 10))
perc.var.4 <- round(100*(1 - kmeans4.employ$betweenss/kmeans4.employ$totss),1)
names(perc.var.4) <- "Perc. 4 clus"
perc.var.4
# Computing the percentage of variation accounted for. Five clusters
(kmeans5.employ <- kmeans(matstd.employ,5,nstart = 10))
perc.var.5 <- round(100*(1 - kmeans5.employ$betweenss/kmeans5.employ$totss),1)
names(perc.var.5) <- "Perc. 5 clus"
perc.var.5
(kmeans6.employ <- kmeans(matstd.employ,6,nstart = 10))
# Computing the percentage of variation accounted for. Six clusters
perc.var.6 <- round(100*(1 - kmeans6.employ$betweenss/kmeans6.employ$totss),1)
names(perc.var.6) <- "Perc. 6 clus"
perc.var.6
attributes(perc.var.6)
Variance_List <- c(perc.var.2,perc.var.3,perc.var.4,perc.var.5,perc.var.6)
Variance_List
plot(Variance_List)
fviz_nbclust(Animal_Rights_data[,2:10], kmeans, method = "gap_stat")
set.seed(100)
km.res <- kmeans(Animal_Rights_data[,2:10], 4, nstart = 15)
# Visualize
fviz_cluster(km.res, data = Animal_Rights_data[,2:10],
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
res.hc <- Animal_Rights_data[,2:10] %>% scale() %>% dist(method = "euclidean") %>%
hclust(method = "ward.D2")
fviz_dend(res.hc, k = 4, # Cut in four groups
cex = 0.5, # label size
k_colors = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"),
color_labels_by_k = TRUE, # color labels by groups
rect = TRUE # Add rectangle around groups
)
fviz_nbclust(res.nbclust, ggtheme = theme_minimal())
res.hc <- Animal_Rights_data[,2:10] %>% scale() %>% dist(method = "euclidean") %>%
hclust(method = "ward.D2")
fviz_dend(res.hc, k = 4, # Cut in four groups
cex = 0.5, # label size
k_colors = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"),
color_labels_by_k = TRUE, # color labels by groups
rect = TRUE # Add rectangle around groups
)
set.seed(123)
# Enhanced hierarchical clustering, cut in 3 groups
res.hc <- Animal_Rights_data[,2:10] %>% scale() %>%
eclust("hclust", k = 2, graph = FALSE)
# Visualize with factoextra
fviz_dend(res.hc, palette = "jco",
rect = TRUE, show_labels = FALSE)
#Inspect the silhouette plot:
fviz_silhouette(res.hc)
# Silhouette width of observations
sil <- res.hc$silinfo$widths[, 1:3]
# Objects with negative silhouette
neg_sil_index <- which(sil[, 'sil_width'] < 0)
sil[neg_sil_index, , drop = FALSE]
res.hc <- Animal_Rights_data[,2:10] %>% scale() %>% dist(method = "euclidean") %>%
hclust(method = "ward.D2")
fviz_dend(res.hc, k = 3, # Cut in four groups
cex = 0.5, # label size
k_colors = c("#2E9FDF", "#E7B800", "#FC4E07"),
color_labels_by_k = TRUE, # color labels by groups
rect = TRUE # Add rectangle around groups
)
fviz_nbclust(res.nbclust, ggtheme = theme_minimal())
res.hc <- Animal_Rights_data[,2:10] %>% scale() %>% dist(method = "euclidean") %>%
hclust(method = "ward.D2")
fviz_dend(res.hc, k = 3, # Cut in four groups
cex = 0.5, # label size
k_colors = c("#2E9FDF", "#E7B800", "#FC4E07"),
color_labels_by_k = TRUE, # color labels by groups
rect = TRUE # Add rectangle around groups
)
res.nbclust <- Animal_Rights_data[,2:10] %>% scale() %>% NbClust(distance = "euclidean", min.nc = 2, max.nc = 10, method = "complete", index ="all")
fviz_nbclust(res.nbclust, ggtheme = theme_minimal())
# K-Means Clustering
matstd.employ <- scale(Animal_Rights_data[,2:10])
# K-means, k=2, 3, 4, 5, 6
# Centers (k's) are numbers thus, 10 random sets are chosen
(kmeans2.employ <- kmeans(matstd.employ,2,nstart = 10))
# Computing the percentage of variation accounted for. Two clusters
perc.var.2 <- round(100*(1 - kmeans2.employ$betweenss/kmeans2.employ$totss),1)
names(perc.var.2) <- "Perc. 2 clus"
perc.var.2
# Computing the percentage of variation accounted for. Three clusters
(kmeans3.employ <- kmeans(matstd.employ,3,nstart = 10))
perc.var.3 <- round(100*(1 - kmeans3.employ$betweenss/kmeans3.employ$totss),1)
names(perc.var.3) <- "Perc. 3 clus"
perc.var.3
# Computing the percentage of variation accounted for. Four clusters
(kmeans4.employ <- kmeans(matstd.employ,4,nstart = 10))
perc.var.4 <- round(100*(1 - kmeans4.employ$betweenss/kmeans4.employ$totss),1)
names(perc.var.4) <- "Perc. 4 clus"
perc.var.4
# Computing the percentage of variation accounted for. Five clusters
(kmeans5.employ <- kmeans(matstd.employ,5,nstart = 10))
perc.var.5 <- round(100*(1 - kmeans5.employ$betweenss/kmeans5.employ$totss),1)
names(perc.var.5) <- "Perc. 5 clus"
perc.var.5
(kmeans6.employ <- kmeans(matstd.employ,6,nstart = 10))
# Computing the percentage of variation accounted for. Six clusters
perc.var.6 <- round(100*(1 - kmeans6.employ$betweenss/kmeans6.employ$totss),1)
names(perc.var.6) <- "Perc. 6 clus"
perc.var.6
attributes(perc.var.6)
Variance_List <- c(perc.var.2,perc.var.3,perc.var.4,perc.var.5,perc.var.6)
Variance_List
plot(Variance_List)
fviz_nbclust(Animal_Rights_data[,2:10], kmeans, method = "gap_stat")
set.seed(100)
km.res <- kmeans(Animal_Rights_data[,2:10], 4, nstart = 1)
# Visualize
fviz_cluster(km.res, data = Animal_Rights_data[,2:10],
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
fit.pc <- principal(Animal_Rights_data[, 2:10], nfactors=3, rotate="varimax")
fit.pc
round(fit.pc$values, 3)
fit.pc$loadings
fa.parallel(Animal_Rights_data[, 2:10])
fa.plot(fit.pc)
fa.diagram(fit.pc)
vss(Animal_Rights_data[, 2:10])
# K-Means Clustering
matstd.employ <- scale(Animal_Rights_data[,2:10])
# K-means, k=2, 3, 4, 5, 6
# Centers (k's) are numbers thus, 10 random sets are chosen
(kmeans2.employ <- kmeans(matstd.employ,2,nstart = 10))
# Computing the percentage of variation accounted for. Two clusters
perc.var.2 <- round(100*(1 - kmeans2.employ$betweenss/kmeans2.employ$totss),1)
names(perc.var.2) <- "Perc. 2 clus"
perc.var.2
# Computing the percentage of variation accounted for. Three clusters
(kmeans3.employ <- kmeans(matstd.employ,3,nstart = 10))
perc.var.3 <- round(100*(1 - kmeans3.employ$betweenss/kmeans3.employ$totss),1)
names(perc.var.3) <- "Perc. 3 clus"
perc.var.3
# Computing the percentage of variation accounted for. Four clusters
(kmeans4.employ <- kmeans(matstd.employ,4,nstart = 10))
perc.var.4 <- round(100*(1 - kmeans4.employ$betweenss/kmeans4.employ$totss),1)
names(perc.var.4) <- "Perc. 4 clus"
perc.var.4
# Computing the percentage of variation accounted for. Five clusters
(kmeans5.employ <- kmeans(matstd.employ,5,nstart = 10))
perc.var.5 <- round(100*(1 - kmeans5.employ$betweenss/kmeans5.employ$totss),1)
names(perc.var.5) <- "Perc. 5 clus"
perc.var.5
(kmeans6.employ <- kmeans(matstd.employ,6,nstart = 10))
# Computing the percentage of variation accounted for. Six clusters
perc.var.6 <- round(100*(1 - kmeans6.employ$betweenss/kmeans6.employ$totss),1)
names(perc.var.6) <- "Perc. 6 clus"
perc.var.6
attributes(perc.var.6)
Variance_List <- c(perc.var.2,perc.var.3,perc.var.4,perc.var.5,perc.var.6)
Variance_List
plot(Variance_List)
fviz_nbclust(Animal_Rights_data[,2:10], kmeans, method = "gap_stat")
set.seed(100)
km.res <- kmeans(Animal_Rights_data[,2:10], 4, nstart = 2)
# Visualize
fviz_cluster(km.res, data = Animal_Rights_data[,2:10],
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
# K-Means Clustering
matstd.employ <- scale(Animal_Rights_data[,2:10])
# K-means, k=2, 3, 4, 5, 6
# Centers (k's) are numbers thus, 10 random sets are chosen
(kmeans2.employ <- kmeans(matstd.employ,2,nstart = 10))
# Computing the percentage of variation accounted for. Two clusters
perc.var.2 <- round(100*(1 - kmeans2.employ$betweenss/kmeans2.employ$totss),1)
names(perc.var.2) <- "Perc. 2 clus"
perc.var.2
# Computing the percentage of variation accounted for. Three clusters
(kmeans3.employ <- kmeans(matstd.employ,3,nstart = 10))
perc.var.3 <- round(100*(1 - kmeans3.employ$betweenss/kmeans3.employ$totss),1)
names(perc.var.3) <- "Perc. 3 clus"
perc.var.3
# Computing the percentage of variation accounted for. Four clusters
(kmeans4.employ <- kmeans(matstd.employ,4,nstart = 10))
perc.var.4 <- round(100*(1 - kmeans4.employ$betweenss/kmeans4.employ$totss),1)
names(perc.var.4) <- "Perc. 4 clus"
perc.var.4
# Computing the percentage of variation accounted for. Five clusters
(kmeans5.employ <- kmeans(matstd.employ,5,nstart = 10))
perc.var.5 <- round(100*(1 - kmeans5.employ$betweenss/kmeans5.employ$totss),1)
names(perc.var.5) <- "Perc. 5 clus"
perc.var.5
(kmeans6.employ <- kmeans(matstd.employ,6,nstart = 10))
# Computing the percentage of variation accounted for. Six clusters
perc.var.6 <- round(100*(1 - kmeans6.employ$betweenss/kmeans6.employ$totss),1)
names(perc.var.6) <- "Perc. 6 clus"
perc.var.6
attributes(perc.var.6)
Variance_List <- c(perc.var.2,perc.var.3,perc.var.4,perc.var.5,perc.var.6)
Variance_List
plot(Variance_List)
fviz_nbclust(Animal_Rights_data[,2:10], kmeans, method = "gap_stat")
set.seed(100)
km.res <- kmeans(Animal_Rights_data[,2:10], 3, nstart = 2)
# Visualize
fviz_cluster(km.res, data = Animal_Rights_data[,2:10],
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
# K-Means Clustering
matstd.employ <- scale(Animal_Rights_data[,2:10])
# K-means, k=2, 3, 4, 5, 6
# Centers (k's) are numbers thus, 10 random sets are chosen
(kmeans2.employ <- kmeans(matstd.employ,2,nstart = 10))
# Computing the percentage of variation accounted for. Two clusters
perc.var.2 <- round(100*(1 - kmeans2.employ$betweenss/kmeans2.employ$totss),1)
names(perc.var.2) <- "Perc. 2 clus"
perc.var.2
# Computing the percentage of variation accounted for. Three clusters
(kmeans3.employ <- kmeans(matstd.employ,3,nstart = 10))
perc.var.3 <- round(100*(1 - kmeans3.employ$betweenss/kmeans3.employ$totss),1)
names(perc.var.3) <- "Perc. 3 clus"
perc.var.3
# Computing the percentage of variation accounted for. Four clusters
(kmeans4.employ <- kmeans(matstd.employ,4,nstart = 10))
perc.var.4 <- round(100*(1 - kmeans4.employ$betweenss/kmeans4.employ$totss),1)
names(perc.var.4) <- "Perc. 4 clus"
perc.var.4
# Computing the percentage of variation accounted for. Five clusters
(kmeans5.employ <- kmeans(matstd.employ,5,nstart = 10))
perc.var.5 <- round(100*(1 - kmeans5.employ$betweenss/kmeans5.employ$totss),1)
names(perc.var.5) <- "Perc. 5 clus"
perc.var.5
(kmeans6.employ <- kmeans(matstd.employ,6,nstart = 10))
# Computing the percentage of variation accounted for. Six clusters
perc.var.6 <- round(100*(1 - kmeans6.employ$betweenss/kmeans6.employ$totss),1)
names(perc.var.6) <- "Perc. 6 clus"
perc.var.6
attributes(perc.var.6)
Variance_List <- c(perc.var.2,perc.var.3,perc.var.4,perc.var.5,perc.var.6)
Variance_List
plot(Variance_List)
fviz_nbclust(Animal_Rights_data[,2:10], kmeans, method = "gap_stat")
set.seed(100)
km.res <- kmeans(Animal_Rights_data[,2:10], 3, nstart = 25)
# Visualize
fviz_cluster(km.res, data = Animal_Rights_data[,2:10],
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
# K-Means Clustering
#Animal_Rights_data_scale <- scale(Animal_Rights_data[,2:10])
matstd.employ <- scale(Animal_Rights_data[,2:10])
# K-means, k=2, 3, 4, 5, 6
# Centers (k's) are numbers thus, 10 random sets are chosen
(kmeans2.employ <- kmeans(matstd.employ,2,nstart = 10))
# Computing the percentage of variation accounted for. Two clusters
perc.var.2 <- round(100*(1 - kmeans2.employ$betweenss/kmeans2.employ$totss),1)
names(perc.var.2) <- "Perc. 2 clus"
perc.var.2
# Computing the percentage of variation accounted for. Three clusters
(kmeans3.employ <- kmeans(matstd.employ,3,nstart = 10))
perc.var.3 <- round(100*(1 - kmeans3.employ$betweenss/kmeans3.employ$totss),1)
names(perc.var.3) <- "Perc. 3 clus"
perc.var.3
# Computing the percentage of variation accounted for. Four clusters
(kmeans4.employ <- kmeans(matstd.employ,4,nstart = 10))
perc.var.4 <- round(100*(1 - kmeans4.employ$betweenss/kmeans4.employ$totss),1)
names(perc.var.4) <- "Perc. 4 clus"
perc.var.4
# Computing the percentage of variation accounted for. Five clusters
(kmeans5.employ <- kmeans(matstd.employ,5,nstart = 10))
perc.var.5 <- round(100*(1 - kmeans5.employ$betweenss/kmeans5.employ$totss),1)
names(perc.var.5) <- "Perc. 5 clus"
perc.var.5
(kmeans6.employ <- kmeans(matstd.employ,6,nstart = 10))
# Computing the percentage of variation accounted for. Six clusters
perc.var.6 <- round(100*(1 - kmeans6.employ$betweenss/kmeans6.employ$totss),1)
names(perc.var.6) <- "Perc. 6 clus"
perc.var.6
attributes(perc.var.6)
Variance_List <- c(perc.var.2,perc.var.3,perc.var.4,perc.var.5,perc.var.6)
Variance_List
plot(Variance_List)
fviz_nbclust(matstd.employ, kmeans, method = "gap_stat")
set.seed(123)
km.res <- kmeans(matstd.employ, 3, nstart = 25)
# Visualize
fviz_cluster(km.res, data = matstd.employ,
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal())
Animal_Rights_PCA <- prcomp(Animal_Rights_data[, 2:10],scale=TRUE)
Animal_Rights_PCA
summary(Animal_Rights_PCA)
(eigen_Animal_Rights <- Animal_Rights_PCA$sdev^2)
names(eigen_Animal_Rights) <- paste("PC",1:7,sep="")
eigen_Animal_Rights
sumlambdas <- sum(eigen_Animal_Rights)
sumlambdas
propvar <- eigen_Animal_Rights/sumlambdas
propvar
cumvar_Animal_Rights <- cumsum(propvar)
cumvar_Animal_Rights
matlambdas <- rbind(eigen_Animal_Rights,propvar,cumvar_Animal_Rights)
rownames(matlambdas) <- c("Eigenvalues","Prop. variance","Cum. prop. variance")
round(matlambdas,4)
summary(Animal_Rights_PCA)
Animal_Rights_PCA$rotation
print(Animal_Rights_PCA)
plot(eigen_Animal_Rights, xlab = "Component number", ylab = "Component variance", type = "l", main = "Scree diagram")
plot(log(eigen_Animal_Rights), xlab = "Component number",ylab = "log(Component variance)", type="l",main = "Log(eigenvalue) diagram")
library(factoextra)
library(FactoMineR)
library(ggfortify)
library(psych)
library(corrplot)
library(devtools)
fviz_eig(Animal_Rights_PCA, addlabels = TRUE)
fviz_pca_var(Animal_Rights_PCA,col.var = "cos2",
gradient.cols = c("#FFCC00", "#CC9933", "#660033", "#330033"),
repel = TRUE)
fviz_pca_ind(Animal_Rights_PCA, col.ind = "cos2",
gradient.cols = c("#FFCC00", "#CC9933", "#660033", "#330033"),
repel = TRUE)
biplot(Animal_Rights_PCA)
autoplot(Animal_Rights_PCA,
data = Animal_Rights_data[, 2:10],
loadings = TRUE,
labels = Animal_Rights_data$Total.Score)
res.pca <- PCA(Animal_Rights_data[, 2:10], graph = FALSE)
print(res.pca)
eig.val <- get_eigenvalue(res.pca)
eig.val
fviz_eig(res.pca, addlabels = TRUE, ylim = c(0, 50))
var <- get_pca_var(res.pca)
var
head(var$coord)
head(var$cos2)
head(var$contrib)
fviz_pca_var(res.pca, col.var = "black")
fit.pc <- principal(Animal_Rights_data[, 2:10], nfactors=4, rotate="varimax")
fit.pc
round(fit.pc$values, 3)
fit.pc$loadings
fa.parallel(Animal_Rights_data[, 2:10])
fa.plot(fit.pc)
fa.diagram(fit.pc)
vss(Animal_Rights_data[, 2:10])
fit.pc <- principal(Animal_Rights_data[, 2:10], nfactors=3, rotate="varimax")
fit.pc
round(fit.pc$values, 3)
fit.pc$loadings
fa.parallel(Animal_Rights_data[, 2:10])
fa.plot(fit.pc)
fa.diagram(fit.pc)
vss(Animal_Rights_data[, 2:10])
fit.pc <- principal(Animal_Rights_data[, 2:10], nfactors=4, rotate="varimax")
fit.pc
round(fit.pc$values, 3)
fit.pc$loadings
fa.parallel(Animal_Rights_data[, 2:10])
fa.plot(fit.pc)
fa.diagram(fit.pc)
vss(Animal_Rights_data[, 2:10])
data <- Animal_Rights_data[, c(2,3,4,5,6,8)]
fit.pc <- principal(Animal_Rights_data[, 2:10], nfactors=4, rotate="varimax")
fit.pc
round(fit.pc$values, 3)
fit.pc$loadings
fa.parallel(Animal_Rights_data[, 2:10])
fa.plot(fit.pc)
fa.diagram(fit.pc)
vss(Animal_Rights_data[, 2:10])
data <- Animal_Rights_data[, c(2,3,4,5,6,8)]
#fit.pc <- principal(Animal_Rights_data[, 2:10], nfactors=4, rotate="varimax")
fit.pc <- principal(data, nfactors=4, rotate="varimax")
fit.pc
round(fit.pc$values, 3)
fit.pc$loadings
fa.parallel(data)
fa.plot(fit.pc)
fa.diagram(fit.pc)
vss(data)
data <- Animal_Rights_data[, c(2,3,4,5,6,8)]
#fit.pc <- principal(Animal_Rights_data[, 2:10], nfactors=4, rotate="varimax")
fit.pc <- principal(data, nfactors=2, rotate="varimax")
fit.pc
round(fit.pc$values, 3)
fit.pc$loadings
fa.parallel(data)
fa.plot(fit.pc)
fa.diagram(fit.pc)
vss(data)
fit.pc <- principal(Animal_Rights_data[, 2:10], nfactors=4, rotate="varimax")
fit.pc
round(fit.pc$values, 3)
fit.pc$loadings
fa.parallel(Animal_Rights_data[, 2:10])
fa.plot(fit.pc)
fa.diagram(fit.pc)
vss(Animal_Rights_data[, 2:10])
fit.pc <- principal(Animal_Rights_data[, 2:10], nfactors=3, rotate="varimax")
fit.pc
round(fit.pc$values, 3)
fit.pc$loadings
fa.parallel(Animal_Rights_data[, 2:10])
fa.plot(fit.pc)
fa.diagram(fit.pc)
vss(Animal_Rights_data[, 2:10])
View(Animal_Rights_S)
library(psych)
library(readr)
library(dplyr)
library(NbClust)
Animal_Rights_data <- read.csv("Animal_Rights.csv", header = TRUE, sep = ',')
summary(Animal_Rights_data)
